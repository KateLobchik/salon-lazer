.page__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  margin: 0;
  padding: 10px 0;

  @media (max-width: $width-tablet) {
    gap: 20px;
    padding: 7px 0;
  }

  @media (max-width: $width-mobile) {
    justify-content: flex-start;
    padding: 25px 0;
    gap: 0;
    // height: 100vh;
  }
}

.page-header__logo-wrapper {
  margin: 0;
  padding: 11px 0 13px;
  width: max-content;

  @media (max-width: $width-tablet) {
    padding: 11px 0 13px;
  }

  @media (max-width: $width-mobile) {
    padding: 0 30px;
  }
}

.page-header__logo-title {
  display: inline-block;
  margin: 0;
  padding: 0;
  width: max-content;
  font-size: 24px;
  line-height: 30px;
  font-weight: bold;
  color: $dark-purple;

  @media (max-width: $width-tablet) {
    font-size: 20px;
    line-height: 24px;
  }

  @media (max-width: $width-mobile) {
    font-size: 15px;
    line-height: 20px;
  }
}

.page-header__logo-link {
  margin: 0;
  padding: 0;
  color: inherit;
  text-decoration: none;
  position: relative;

  &::before {
    position: absolute;
    content: '';
    top: -15px;
    right: -15px;
    bottom: -15px;
    left: -15px;
  }

  @media (max-width: $width-tablet) {
    &::before {
      top: -12px;
      right: -12px;
      bottom: -12px;
      left: -12px;
    }
  }

  @media (max-width: $width-mobile) {
    &::before {
      top: -10px;
      right: -10px;
      bottom: -10px;
      left: -10px;
    }
  }
}

.page-header__button-container {
  margin: 0;
  padding: 0;
}

.page-header__button {
  @media (max-width: $width-mobile) {
    width: 20px;
    height: 20px;
    font-size: 0;
    line-height: 0;
    padding: 0;
    margin-left: auto;
    background-color: transparent;
    background-image: url("../img/icons/phone-icon.svg");
    background-position: center;
    background-repeat: no-repeat;
    background-size: 20px 20px;
    border-radius: 0;

    &:hover,
    &:focus {
      background-color: transparent;
      background-image: url("../img/icons/phone-icon-hover.svg");
    }

    &:active {
      opacity: 0.7;
    }
  }
}






// var self = this;

// this.setOnChartClick((e) => {
// if(e.data.bankName != 'Итого') {
//     if (this._privateFilters.length == 0) {
//         var field = 'onebank';
//         var name = e.data.bankName;
//     }
//     if (this._privateFilters.length == 1) {
//         var field = 'onebank';
//         var name = e.data.bankName;
//     }
//     this.setPrivateFilters([{field:field, value:name}], 1);

//     if (this._privateFilters.length == 1) {
//         setChartOptions();
//         self.chartInstance.setOption(self.options, {notMerge: true});
//     }
// }
// });

// //вспомогательные функции
// var addRankToNumber = number => {
//     return parseFloat(number).toLocaleString('ru');
// }

// this.getData = queryName => {
//     var list = [];
//     var result = ((this.response || {}).results) || [];
//     if (result[0]) {
//         for (var h=0; h<result.length; h++){
//             if (result[h].value == queryName) {
//                 var data = (result[h] || {}).data;
//                 for (var j=0; j<data.length; j++) {
//                 if (data[j]) {
//                     var itemslist= {}
//                     var info = data[j].info || [];
//                         for (var i=0; i<info.length; i++){
//                             itemslist[info[i].field] = info[i].value;
//                         }
//                     list.push(itemslist)
//                     }
//                 }
//             }
//         }
//     }
//     return list;
// };

// var addEnter = (text, textLength,enterLength) => {
//     var sum = 0;
//     var newText = text;
//     for (let char of newText) {
//         if (newText.length > textLength && sum > enterLength && char == " ") {
//             newText = newText.substring(0,sum) + '\n' + newText.substring(sum+1);
//             break;
//         } else {
//             newText = text;
//         }
//         sum = sum + 1;
//     }
//     return newText;
// }

// //Данные из запроса
// var dataManagerList = this.getData("MANAGER_LIST");
// var dataDateList = this.getData("DATE_LIST");


// //форматтер тултипа
// this.formatter = function (params) {
//     var name = null;
//     var table = []
//     for (var i=0; i<params.length; i++) {
//         var  p = params[i];
//         name = p.name;

//         if (p.data.itenName === 'factOver' && p.value != 0) {
//             table.push("<tr><td>"+ p.marker + '&nbsp' + 'факт' +"&nbsp;&nbsp;</td><td align='right'><strong>" + name + "&nbsp</strong></td></tr>");
//         }
//         if (p.data.itenName === 'fact' && p.value != 0) {
//             table.push("<tr><td>"+ p.marker + '&nbsp' + 'факт' +"&nbsp;&nbsp;</td><td align='right'><strong>" + name + "&nbsp</strong></td></tr>");
//         }
//         if (p.data.itenName === 'forecast') {
//             table.push("<tr><td>"+ p.marker + '&nbsp' + 'прогноз' +"&nbsp;&nbsp;</td><td align='right'><strong>" + name + "&nbsp</strong></td></tr>");
//         }
//     }

//     return "<strong>"+ p.axisValue +"</strong><table border=0  width='100%'>"+table.join('')+"</table>";
// };

// //заполняем нужными данными
// var series = [];
// var yAxis = [];
// var gridMode = {};
// var formatterTooltip = {};
// var dataZoom = [];

// var numberColorMaxLeft = (fontSize) => {
//     return {
//         show: true,
//         align: 'left',
//         position: 'insideLeft',
//         formatter: '{b}',
//         color: 'white',
//         fontSize: fontSize,
//         // fontWeight: 'bold'
//     }
// }
// var numberColorLeft = (value, fontSize) => {
//     if (value == 0) {
//     return {}
//     } else {
//         return {
//         show: true,
//         align: 'left',
//         position: 'insideLeft',
//         formatter: '{b}',
//         color: 'black',
//         fontSize: fontSize
//     }
//     }
// }
// var numberColorMaxRight = (fontSize) => {
//     return {
//         show: true,
//         align: 'right',
//         position: 'insideRight',
//         formatter: '{b}',
//         color: 'white',
//         fontSize: fontSize,
//         // fontWeight: 'bold'
//     }
// }
// var numberColorRight = (value, fontSize) => {
//     if (value == 0) {
//     return {}
//     } else {
//         return {
//         show: true,
//         align: 'right',
//         position: 'insideRight',
//         formatter: '{b}',
//         color: 'black',
//         fontSize: fontSize
//     }
//     }
// }

// var renderMode0 = () => {
//    var data = this.getData("EXCELCSV");
//     formatterTooltip = {};
//     formatterTooltip = {
//         trigger: 'axis',
//         formatter: this.formatter
//     };
//     gridMode = {};
//     dataZoom = [];
//     yAxis = [];
//     series = [];
//     var labels = [];
//     // var dataForecast = [];
//     var dataValuesFact = [];
//     var dataValuesFactOver = [];
//     var dataValuesForecast = [];
//     var scaleWidth = 200;

//     var sumForecast = 0;
//     var sumFact = 0;

//     for (let i = 0; i < data.length; i++) {
//         var item = data[i];
//         var dataName = item.client;
//         var dataValForecast = item.sumforecast;

//         if (item.fact != undefined) {
//             var dataValFact = Math.round(parseFloat(item.fact));
//         } else {
//             var dataValFact = 0;
//         }

//         sumForecast = sumForecast + parseFloat(dataValForecast);
//         sumFact = sumFact + parseFloat(dataValFact);
//         var scaleWidthFact = (scaleWidth * Math.round((dataValFact * 100) / dataValForecast)) / 100;
//         if (scaleWidthFact >= scaleWidth) {
//             var scaleWidthFact = scaleWidth;
//             var colorForecastNumber = numberColorMaxRight(15);
//             var scaleWidthForecast = 0;
//             dataValuesFact.unshift({name: addRankToNumber(dataValFact), value: 0, bankName: dataName, itenName: 'fact' });
//             dataValuesFactOver.unshift({name: addRankToNumber(dataValFact), value: scaleWidthFact, bankName: dataName, itenName: 'factOver', label: numberColorMaxLeft(15)});
//         } else {
//             var colorForecastNumber = numberColorRight(dataValForecast, 15);
//             var scaleWidthForecast = scaleWidth - scaleWidthFact;
//             dataValuesFact.unshift({name: addRankToNumber(dataValFact), value: scaleWidthFact, itemStyle: {color: '#91cc75'}, bankName: dataName, itenName: 'fact'});
//             dataValuesFactOver.unshift({name: addRankToNumber(dataValFact), value: 0, bankName: dataName,  itenName: 'factOver', label: numberColorLeft(dataValFact, 15)});
//         }

//         labels.unshift({name: dataValForecast, value: addEnter(dataName, 18, 18), textStyle: {fontSize: 15, color: 'black'}});
//         dataValuesForecast.unshift({name: addRankToNumber(dataValForecast), value: scaleWidthForecast, bankName: dataName,  itenName: 'forecast', label: colorForecastNumber});
//         // dataForecast.unshift({name: addRankToNumber(dataValForecast), value: 0, bankName: dataName, label: colorForecastNumber});


//         if (data.length - 1 == i) {
//             labels.push({name:dataValForecast, value: "ИТОГО", textStyle: {fontSize: 17, fontWeight: 'bold', color: 'black'}});
//             var scaleWidthFactTotal = (scaleWidth * Math.round((sumFact * 100) / sumForecast)) / 100;
//             scaleWidthFactTotal = 500000000;
//             if (scaleWidthFactTotal >= scaleWidth) {
//                 var colorForecastNumberTotal = numberColorMaxRight(17);
//                 var scaleWidthFactTotal = scaleWidth;
//                 var scaleWidthForecastTotal = 0;
//                 dataValuesFact.push({name: addRankToNumber(sumFact), value: 0, bankName: 'Итого', itenName: 'fact'});
//                 dataValuesFactOver.push({name: addRankToNumber(sumFact), value: scaleWidthFactTotal, bankName: 'Итого', itenName: 'factOver', label: numberColorMaxLeft(17)});
//             } else {
//                 var colorForecastNumberTotal = numberColorRight(sumForecast, 17);
//                 var scaleWidthForecastTotal = scaleWidth - scaleWidthFactTotal;
//                 dataValuesFact.push({name: addRankToNumber(sumFact), value: scaleWidthFactTotal, itemStyle: {color: '#91cc75'}, bankName: 'Итого', itenName: 'fact', label: numberColorLeft(sumFact, 17)});
//                 dataValuesFactOver.push({name: addRankToNumber(sumFact), value: 0, bankName: 'Итого',  itenName: 'factOver'});
//             }
//             dataValuesForecast.push({name: addRankToNumber(sumForecast), value: scaleWidthForecastTotal, bankName: 'Итого',  itenName: 'forecast', label: colorForecastNumberTotal});
//             // dataForecast.push({name: addRankToNumber(sumForecast), value: 0, bankName: 'Итого', label: colorForecastNumberTotal});
//         }
//     }

//     gridMode = {
//         containLabel: true
//     }

//     if(labels.length > 8){
//         dataZoom = [
//             {
//                 type: 'slider',
//                 // yAxisIndex: [0],
//                 // realtime: false,
//                 orient:'vertical',
//                 start: 100,
//                 end: 75,
//                 right: '4%',
//                 handleSize: '100%'
//             }
//         ];
//     } else {
//         dataZoom = [
//             {
//                 start: 100,
//                 end: 0,
//                 show: false
//             }
//         ]
//     }

//     yAxis.push({
//         type: 'category',
//         data: labels,
//         offset: 20,
//         axisLine: {
//             show: false
//         },
//         axisTick: {
//             show: false
//         }
//     });

//     series = [
//         {
//             name: 'Факт превышен',
//             data: dataValuesFactOver,
//             type: 'bar',
//             stack: 1,
//             // label: {
//             //     show: true,
//             //     align: 'left',
//             //     position: 'insideLeft',
//             //     formatter: '{b}',
//             //     // color: 'black',
//             //     // fontSize: 15,
//             // }
//         },
//         {
//             name: 'Факт',
//             data: dataValuesFact,
//             type: 'bar',
//             stack: 1
//         },
//         {
//             name: 'Прогноз',
//             data: dataValuesForecast,
//             type: 'bar',
//             stack: 1,
//             itemStyle: {
//                 color: 'rgb(204, 204, 204)'
//             },
//         },
//         // {
//         //     data: dataForecast,
//         //     type: 'bar',
//         //     stack: 1,
//         //     // label: {
//         //     //     show: true,
//         //     //     align: 'right',
//         //     //     position: 'insideRight',
//         //     //     formatter: '{b}',
//         //     //     color: 'black',
//         //     //     fontSize: 15,
//         //     // },
//         //     itemStyle: {
//         //         color: 'transparent'
//         //     },
//         // }
//     ];
// }

// var renderMode1 = () => {
//    var data = this.getData("BANK_PROJECTS");
//    formatterTooltip = {};
//    formatterTooltip = {
//         trigger: 'axis',
//         showContent: false
//    };
//    gridMode = {};
//    dataZoom = [];
//    yAxis = [];
//     series = [];
//     var labels = [
//         {
//             name:'Клиент', value: 120, textStyle: {fontSize: 15, color: 'black'},
//             label: {
//                 show: true,
//                 align: 'left',
//                 position: 'insideLeft',
//                 formatter: '{b}',
//                 color: 'black',
//                 fontSize: 16
//             },
//             itemStyle: {
//                 color: 'rgba(204, 204, 204, 0.6)'
//             }
//         }
//     ];
//     var dataForecast = [
//         {
//             name:'Прогноз', value: 60, textStyle: {fontSize: 15, color: 'black'},
//             label: {
//                 show: true,
//                 align: 'right',
//                 position: 'insideRight',
//                 formatter: '{b}',
//                 color: 'black',
//                 fontSize: 16
//             },
//             itemStyle: {
//                 color: 'rgba(204, 204, 204, 0.6)'
//             }
//         }
//     ];
//     var dataNameDocs = [
//         {
//             name: 'Наименование проекта', value: 160, textStyle: {fontSize: 15, color: 'black'},
//             label: {
//                 show: true,
//                 align: 'left',
//                 position: 'insideLeft',
//                 formatter: '{b}',
//                 color: 'black',
//                 fontSize: 16
//             },
//             itemStyle: {
//                 color: 'rgba(204, 204, 204, 0.6)'
//             }
//         }
//     ];
//     var dataNumberDocs = [
//         {
//             name:'Номер проекта', value: 140, textStyle: {fontSize: 15, color: 'black'},
//             label: {
//                 show: true,
//                 align: 'left',
//                 position: 'insideLeft',
//                 formatter: '{b}',
//                 color: 'black',
//                 fontSize: 16
//             },
//             itemStyle: {
//                 color: 'rgba(204, 204, 204, 0.6)'
//             }
//         }
//     ];

//     for (let item of data) {
//         var dataName = item.client;
//         var dataValForecast = item.forecast;
//         var nameDoc = item.namedoc;
//         var numberDoc = item.doc;

//         labels.unshift({name: addEnter(dataName, 13, 13), value: 120, textStyle: {fontSize: 15, color: 'black'}});
//         dataNameDocs.unshift({name: addEnter(nameDoc, 27, 25), value: 160});
//         dataNumberDocs.unshift({name: addEnter(numberDoc, 27, 10), value: 140});
//         dataForecast.unshift({name: addRankToNumber(dataValForecast), value: 60, bankName: dataName});
//     }

//     gridMode = {
//         containLabel: false,
//         left: '3%',
//         right: '3%'
//     }

//     if(labels.length > 6){
//         dataZoom = [
//             {
//                 type: 'slider',
//                 // yAxisIndex: [0],
//                 // realtime: false,
//                 orient:'vertical',
//                 start: 100,
//                 end: 70,
//                 right: '4%',
//                 handleSize: '100%',
//                 // labelFormatter: value=>{
//                 //     return value.toLocaleString();
//                 // }
//             }
//         ];
//     } else {
//         dataZoom = [
//             {
//                 start: 100,
//                 end: 0,
//                 show: false
//             }
//         ]
//     }

//     yAxis.push({
//         type: 'category',
//         data: labels,
//         offset: 20,
//         axisLine: {
//             show: false
//         },
//         axisTick: {
//             show: false
//         },
//         show: false
//     })

//     series = [
//         {
//             data: labels,
//             type: 'bar',
//             stack: 1,
//             label: {
//                 show: true,
//                 align: 'left',
//                 position: 'insideLeft',
//                 formatter: '{b}',
//                 color: 'black',
//                 fontSize: 15
//             },
//             itemStyle: {
//                 color: 'transparent'
//             },
//         },
//         {
//             data: dataNumberDocs,
//             type: 'bar',
//             stack: 1,
//             label: {
//                 show: true,
//                 align: 'left',
//                 position: 'insideLeft',
//                 formatter: '{b}',
//                 color: 'black',
//                 fontSize: 15
//             },
//             itemStyle: {
//                 color: 'transparent'
//             },
//         },
//         {
//             data: dataNameDocs,
//             type: 'bar',
//             stack: 1,
//             label: {
//                 show: true,
//                 align: 'left',
//                 position: 'insideLeft',
//                 formatter: '{b}',
//                 color: 'black',
//                 fontSize: 15
//             },
//             itemStyle: {
//                 color: 'transparent',
//                 overflow: 'hidden'
//             },
//         },

//         {
//             data: dataForecast,
//             type: 'bar',
//             stack: 1,
//             label: {
//                 show: true,
//                 align: 'right',
//                 position: 'insideRight',
//                 formatter: '{b}',
//                 color: 'black',
//                 fontSize: 16,
//             },
//             itemStyle: {
//                 color: 'transparent'
//             }
//         }
//     ];
// }

// //Создаем список для фильтра
// var createFilterList = (data) => {
//     var pcList = [];
//     for (const val of data){
//         var name = Object.keys(val)[0];
//         if(val[name] == '') {
//             pcList.push({name: 'не указан', value: ''});
//         } else {
//             pcList.push({name: val[name], value: val[name]});
//         }
//     };
//     return pcList;
// }

// //опции для графика
// this.options = {
//     grid: { containLabel: true },
//     title: {},
//     series: []
// };

// //задаём нужные опции
// var setChartOptions = () => {
//     if(this._privateFilters.length == 0) {
//         renderMode0();
//     }
//     if(this._privateFilters.length == 1) {
//         renderMode1();
//     }

//     // self.options.legend = {};
//     self.options.grid = gridMode;
//     self.options.dataZoom = dataZoom;
//     self.options.tooltip = formatterTooltip;
//     self.options.xAxis = {
//         type: 'value',
//         show: false,
//         boundaryGap: false
//     };
//     self.options.yAxis = yAxis;
//     self.options.series = series;
// };

// setChartOptions();

// //престраиваем график после изменения запроса при изменениии фильтра
// const opt = () => {
//     self.chartInstance.setOption(self.options, {notMerge: false});
//     return this.options;
// }

// const config = {
//     type: 'group',
//     style: 'display: flex;',
//     components: [
//         {
//             type: 'group',
//             style: 'display: flex; position: relative; justify-content: space-between',
//             components: [
//                 {
//                     type: 'group',
//                     style: 'display: flex;',
//                     components: [
//                         {
//                             type: 'filter',
//                             name: 'filter1',
//                             sysName: 'filter1',
//                             // show: true,
//                             name: 'По менеджеру УП',
//                             placeholder: 'Выберите менеджера из списка',
//                             style: 'width: 250px; flex: none; ',
//                             options: {
//                                 type: 'multi',
//                                 field: 'SYS',
//                                 style: 'flex-direction: row;',
//                                 optionsList: createFilterList(dataManagerList),
//                                 // onInit: (e) =>  {this.processFilters(e, true);},
//                                 onChange: (e) => {
//                                     if (e.selected) {
//                                         var ff = [];
//                                         for (var val of e.selected){
//                                         ff.push({"field":e.options.field, "value": val.value});
//                                         }
//                                         self.setChartFilters(ff);
//                                         // this.setDashboardFilters(ff, true);
//                                     }
//                                 }
//                             }
//                         },
//                         {
//                             type: 'filter',
//                             name: 'filter2',
//                             sysName: 'filter2',
//                             // show: true,
//                             name: 'Прогноз',
//                             // placeholder: 'Прогноз',
//                             style: 'width: 260px; flex: none; ',
//                             options:
//                                 {
//                                 type: 'radio',
//                                 field: 'SYS_DATE',
//                                 style: 'flex-direction: row;',
//                                 optionsList: [
//                                     {name: 'предыдущий', value: '0'},
//                                     {name: 'текущий', value: '1'}
//                                 ],
//                                 // onChange: (e) => {
//                                 //     self.changeMode1(e.selected);
//                                 // }
//                             }
//                             // {
//                             //     type: 'multi',
//                             //     field: 'SYS_DATE',
//                             //     style: 'flex-direction: row;',
//                             //     optionsList: createFilterList(dataDateList),
//                             //     selected: createFilterList(dataDateList)[0],
//                             //     // onInit: (e) =>  {
//                             //     //     var lastItem = e.options.optionsList.length - 1;
//                             //     //     var lastDate = e.options.optionsList[lastItem];
//                             //     //     self.setChartFilters([lastDate]);
//                             //     //     // this.processFilters(e, true);
//                             //     //     this.setDashboardFilters([lastDate], true);
//                             //     //     },
//                             //     onChange: (e) => {
//                             //         if (e.selected) {
//                             //             console.log(e)
//                             //             var ff = [];
//                             //             for (var val of e.selected){
//                             //             ff.push({"field":e.options.field, "value": val.value});
//                             //             }
//                             //             self.setChartFilters(ff);
//                             //             this.setDashboardFilters(ff, true);
//                             //         }
//                             //     }
//                             // }
//                         },
//                         {
//                             type: 'filter',
//                             name: 'filter3',
//                             sysName: 'filter3',
//                             // show: true,
//                             name: 'Сортировка по',
//                             // placeholder: 'Прогноз',
//                             style: 'width: 200px; flex: none; ',
//                             options:
//                                 {
//                                 type: 'radio',
//                                 field: 'SYS_SORT',
//                                 style: 'flex-direction: row;',
//                                 optionsList: [
//                                     {name: 'факту', value: '0'},
//                                     {name: 'прогнозу', value: '1'}
//                                 ],
//                                 // onChange: (e) => {
//                                 //     self.changeMode1(e.selected);
//                                 // },
//                                 onInit: function () {
//                                     self.setChartFilters([
//                                         {field: "SYS_DATE", value: '1'},
//                                         {field: "SYS_SORT", value: '1'}
//                                     ]);
//                                 }
//                             }
//                         }
//                     ]
//                 },
//                 {
// 					type: 'group',
//                     style: 'align-self: center; height: min-content; margin-left: auto',
// 					components: [
//                         {
//                             type: 'button',
//                             label: 'Назад',
//                             options: {
//                                 onClick: () => {
//                                     this.clearPrivateFilters();
//                                     this._privateFilters.length = 0;
//                                     setChartOptions();
//                                     self.chartInstance.setOption(self.options, {notMerge: true});
//                                 }
//                             }
//                         }
// 					]
// 				}
//             ]
//         },
//         {
//             type: 'group',
//             style: 'display: flex; flex: 1; justify-content: stretch; width: 100%; ',
//             components: [
//                 {
//                     sysName: 'chart',
//                     type: 'chart',
//                     name: 'nameChart',
//                     show: true,
//                     style: 'margin: 0; padding: 0; width 100%;',
//                     options: opt()
//                 }
//             ]
//         }
//   ]
// };

// this.setConfig(config);







/*#if(${record_type} and ${record_type.get(0)} == 'profitability')
select
	q1.yearfinance,
	(q2.summawithoutnds / q1.summawithoutnds) * 100 as summawithoutnds
    ,q1.numfinance, q1.quarter
from
	(
	select
		sum(r.summawithoutnds) as summawithoutnds ,
		upper(q.yearfinance) || 'FY' as yearfinance
		,upper(q.numfinance) as numfinance, r.quarter
	from
		revenue r
	inner join business b on
		r.business = b.id
	inner join quarters q on
		q.datastart = r.quarter
	where b.name in (
	    'none'
        #if(${business} and ${business.get(0)} == 'bna') ,'БНА' #end
	    #if(${business} and ${business.get(0)} == 'bpo') ,'БПО' #end
	    #if(${business} and ${business.get(0)} == 'btd') ,'БТД' #end
	)
	group by numfinance, yearfinance, r.quarter
	order by numfinance, yearfinance
) as q1
left join (
	select
		sum(r.summawithoutnds) as summawithoutnds ,
		upper(q.yearfinance) || 'FY' as yearfinance
		upper(q.numfinance) as numfinance, r.quarter
	from
		netprofit r
	inner join business b on
		r.businessid = b.id
	inner join quarters q on
		q.datastart = r.quarter
	where b.name in (
	    'none'
	 	#if(${business} and ${business.get(0)} == 'bna') ,'БНА' #end
	    #if(${business} and ${business.get(0)} == 'bpo') ,'БПО' #end
	    #if(${business} and ${business.get(0)} == 'btd') ,'БТД' #end
	)
	group by q.numfinance, q.yearfinance, r.quarter
	order by q.numfinance, q.yearfinance
) as q2 on q1.yearfinance = q2.yearfinance
 and q1.numfinance = q2.numfinance
#elseif(${record_type} and ${record_type.get(0)} == 'operatingprofitability')
    select
		sum(r.summawithoutnds)/sum(rev.summawithoutnds) * 100 as summawithoutnds ,
		upper(q.numfinance) as numfinance,
		upper(q.yearfinance) || 'FY' as yearfinance,
        r.quarter
	from
		operatingprofit r
		inner join revenue rev on r.quarter = rev.quarter and r.business = rev.business
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
    where b.name in (
        'none'
        #if(${business} and ${business.get(0)} == 'bna') ,'БНА' #end
        #if(${business} and ${business.get(0)} == 'bpo') ,'БПО' #end
        #if(${business} and ${business.get(0)} == 'btd') ,'БТД' #end
    )
    group by q.numfinance, q.yearfinance, r.quarter
    order by q.numfinance, q.yearfinance
#else
select
		sum(r.summawithoutnds) as summawithoutnds ,
		upper(q.numfinance) as numfinance,
		upper(q.yearfinance) || 'FY' as yearfinance,
        r.quarter

#if(${record_type} and ${record_type.get(0)} == 'revenue')
	from
		revenue r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
#elseif (${record_type} and ${record_type.get(0)} == 'partnerrevenue')
	from
		partnerrevenue r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
#elseif (${record_type} and ${record_type.get(0)} == 'netprofit')
	from
		netprofit r
		inner join business b on r.businessid = b.id
		inner join quarters q on q.datastart  = r.quarter
#elseif (${record_type} and ${record_type.get(0)} == 'vat')
	from
		vat r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
        #elseif (${record_type} and ${record_type.get(0)} == 'operatingprofit')
	from
		operatingprofit r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
#elseif (${record_type} and ${record_type.get(0)} == 'netassets')
	from
		netassets r
		inner join business b on r.businessid = b.id
		inner join quarters q on q.datastart  = r.quarter
#else
	from
		ebitda r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
#end

where b.name in (
    'none'
 	#if(${business} and ${business.get(0)} == 'bna') ,'БНА' #end
	#if(${business} and ${business.get(0)} == 'bpo') ,'БПО' #end
	#if(${business} and ${business.get(0)} == 'btd') ,'БТД' #end
)
group by q.numfinance, q.yearfinance, r.quarter
order by q.numfinance, q.yearfinance
#end
*/

/*
test2
#if(${record_type} and ${record_type.get(0)} == 'profitability')
select
	q1.yearfinance,
	(q2.summawithoutnds / q1.summawithoutnds) * 100 as summawithoutnds
    #if(${YEAR})
    #else
        ,q1.numfinance, q1.quarter
    #end
from
	(
	select
		sum(r.summawithoutnds) as summawithoutnds ,
		upper(q.yearfinance) || 'FY' as yearfinance
	from
		revenue r
	inner join business b on
		r.business = b.id
	inner join quarters q on
		q.datastart = r.quarter
	where b.name in (
	    'none'
        #if(${business} and ${business.get(0)} == 'bna') ,'БНА' #end
	    #if(${business} and ${business.get(0)} == 'bpo') ,'БПО' #end
	    #if(${business} and ${business.get(0)} == 'btd') ,'БТД' #end
	)
    #if(${YEAR})
        group by yearfinance
        order by yearfinance
    #else
        group by numfinance, yearfinance, r.quarter
        order by numfinance, yearfinance
    #end
) as q1
left join (
	select
		sum(r.summawithoutnds) as summawithoutnds ,
		upper(q.yearfinance) || 'FY' as yearfinance
	from
		netprofit r
	inner join business b on
		r.businessid = b.id
	inner join quarters q on
		q.datastart = r.quarter
	where b.name in (
	    'none'
	 	#if(${business} and ${business.get(0)} == 'bna') ,'БНА' #end
	    #if(${business} and ${business.get(0)} == 'bpo') ,'БПО' #end
	    #if(${business} and ${business.get(0)} == 'btd') ,'БТД' #end
	)
	group by q.yearfinance
	order by q.yearfinance
) as q2 on q1.yearfinance = q2.yearfinance
#elseif(${record_type} and ${record_type.get(0)} == 'operatingprofitability')
    select
		sum(r.summawithoutnds)/sum(rev.summawithoutnds) * 100 as summawithoutnds ,
		upper(q.yearfinance) || 'FY' as yearfinance
	from
		operatingprofit r
		inner join revenue rev on r.quarter = rev.quarter and r.business = rev.business
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
    where b.name in (
        'none'
        #if(${business} and ${business.get(0)} == 'bna') ,'БНА' #end
        #if(${business} and ${business.get(0)} == 'bpo') ,'БПО' #end
        #if(${business} and ${business.get(0)} == 'btd') ,'БТД' #end
    )
    group by q.yearfinance
    order by q.yearfinance
#else
select
		sum(r.summawithoutnds) as summawithoutnds ,
		upper(q.yearfinance) || 'FY' as yearfinance

#if(${record_type} and ${record_type.get(0)} == 'revenue')
	from
		revenue r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
#elseif (${record_type} and ${record_type.get(0)} == 'partnerrevenue')
	from
		partnerrevenue r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
#elseif (${record_type} and ${record_type.get(0)} == 'netprofit')
	from
		netprofit r
		inner join business b on r.businessid = b.id
		inner join quarters q on q.datastart  = r.quarter
#elseif (${record_type} and ${record_type.get(0)} == 'vat')
	from
		vat r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
        #elseif (${record_type} and ${record_type.get(0)} == 'operatingprofit')
	from
		operatingprofit r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
#elseif (${record_type} and ${record_type.get(0)} == 'netassets')
	from
		netassets r
		inner join business b on r.businessid = b.id
		inner join quarters q on q.datastart  = r.quarter
#else
	from
		ebitda r
		inner join business b on r.business = b.id
		inner join quarters q on q.datastart  = r.quarter
#end

where b.name in (
    'none'
 	#if(${business} and ${business.get(0)} == 'bna') ,'БНА' #end
	#if(${business} and ${business.get(0)} == 'bpo') ,'БПО' #end
	#if(${business} and ${business.get(0)} == 'btd') ,'БТД' #end
)
group by yearfinance
order by yearfinance
#end */
